buildscript {
    repositories {
        mavenLocal()
        maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.37"
        classpath group: 'net.rubygrapefruit', name: 'native-platform', version: '0.10'
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_plugin_version"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomic_fu_version"
    }
}

allprojects {
    repositories {
        mavenLocal()
        maven { url 'https://kotlin.bintray.com/kotlinx' }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        jcenter()
    }

    apply plugin: 'kotlin-multiplatform'
    apply plugin: 'kotlinx-atomicfu'

    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    if (project.hasProperty('releaseVersion')) {
        project.version = project.releaseVersion
    }

    kotlin {
        targets {
            fromPreset(presets.jvm, 'jvm')
            fromPreset(presets.iosArm32, 'iosArm32')
            fromPreset(presets.iosArm64, 'iosArm64')
            fromPreset(presets.iosX64, 'ios64')
            fromPreset(presets.macosX64, 'macos64')
            fromPreset(presets.linuxX64, 'linux64')
            fromPreset(presets.mingwX64, 'windows64')
            if (System.getProperty('idea.active') == 'true') {
                fromPreset(presets.linuxX64, 'native')
            }
        }
        sourceSets {

            commonMain {
                kotlin.srcDir 'common/src'

                dependencies {
                    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-common', version: kotlin_version

                    implementation "org.jetbrains.kotlinx:atomicfu:$atomic_fu_version"
                    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-common', version: coroutines_version
                }
            }
            commonTest {
                kotlin.srcDir 'common/test'

                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
                    implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
                }
            }
            jvmMain {
                kotlin.srcDir 'jvm/src'

                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                }
            }
            jvmTest {
                kotlin.srcDir 'jvm/test'

                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-test'
                    implementation 'org.jetbrains.kotlin:kotlin-test-junit'
                }
            }
            jsMain {
                kotlin.srcDir 'js/src'
                dependencies {
                }
            }
            jsTest {
                kotlin.srcDir 'js/test'
            }
            nativeMain {
                kotlin.srcDir 'native/src'
                dependencies {
                }
            }
            nativeTest {
                kotlin.srcDir 'native/test'
            }

            configure([linux64Main, macos64Main, windows64Main, iosArm32Main, iosArm64Main, iosX64Main]) {
                dependsOn nativeMain
            }
            configure([linux64Test, macos64Test, windows64Test, iosArm32Test, iosArm64Test, iosX64Test]) {
                dependsOn nativeTest
            }
        }
    }
}
